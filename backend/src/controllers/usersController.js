import pool from '../config/database.js'

// üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ email
const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)

// üë§ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è admin)
export const getAllUsers = async (req, res) => {
    try {
        // req.user –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ middleware verifyToken
        if (req.user.role !== 'admin') {
            return res.status(403).json({ message: 'Access denied: Admins only' })
        }

        const result = await pool.query('SELECT id, name, email, role, created_at FROM users ORDER BY created_at DESC')
        res.json(result.rows)
    } catch (error) {
        console.error('Error fetching users:', error)
        res.status(500).json({ message: 'Failed to fetch users' })
    }
}

// ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
export const createUser = async (req, res) => {
    try {
        const { name, email, role = 'user' } = req.body

        if (!name?.trim() || !email?.trim()) {
            return res.status(400).json({ message: 'Name and email are required' })
        }

        if (!isValidEmail(email)) {
            return res.status(400).json({ message: 'Email must be valid' })
        }

        if (name.length > 100) return res.status(400).json({ message: 'Name too long' })
        if (email.length > 150) return res.status(400).json({ message: 'Email too long' })

        // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å
        const userRole = req.user.role === 'admin' ? role : 'user'

        const result = await pool.query(
            'INSERT INTO users (name, email, role) VALUES ($1, $2, $3) RETURNING id, name, email, role, created_at',
            [name.trim(), email.trim(), userRole]
        )

        res.status(201).json(result.rows[0])
    } catch (error) {
        console.error('Error creating user:', error)
        if (error.code === '23505') {
            return res.status(400).json({ message: 'Email already exists' })
        }
        res.status(500).json({ message: 'Failed to create user' })
    }
}

// ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
export const deleteUser = async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ message: 'Access denied: Admins only' })
        }

        const { id } = req.params
        if (!id || isNaN(id)) {
            return res.status(400).json({ message: 'Invalid user ID' })
        }

        const result = await pool.query('DELETE FROM users WHERE id = $1', [id])

        if (result.rowCount === 0) {
            return res.status(404).json({ message: `User with ID ${id} not found` })
        }

        res.status(204).send()
    } catch (error) {
        console.error('Error deleting user:', error)
        res.status(500).json({ message: 'Failed to delete user' })
    }
}

// üì¶ –ó–∞–∫–∞–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–µ–±—è –∏–ª–∏ –∞–¥–º–∏–Ω)
export const getUserOrders = async (req, res) => {
    try {
        const { id } = req.params

        if (!id || isNaN(id)) {
            return res.status(400).json({ message: 'Invalid user ID' })
        }

        // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
        if (req.user.role !== 'admin' && req.user.id !== parseInt(id)) {
            return res.status(403).json({ message: 'Access denied: You can view only your orders' })
        }

        const result = await pool.query(
            'SELECT * FROM orders WHERE user_id = $1 ORDER BY order_date DESC',
            [id]
        )

        res.json(result.rows)
    } catch (error) {
        console.error('Error fetching user orders:', error)
        res.status(500).json({ message: 'Failed to fetch user orders' })
    }
}